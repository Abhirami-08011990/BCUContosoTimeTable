// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BCUContoso.Timetable.APITests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "web")]
    public partial class ContosaTimeTableBlazorUIFeature : object, Xunit.IClassFixture<ContosaTimeTableBlazorUIFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "web"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Contosa Time Table Blazor UI", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ContosoTimeTableBlazor.feature"
#line hidden
        
        public ContosaTimeTableBlazorUIFeature(ContosaTimeTableBlazorUIFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 4
#line hidden
#line 5
await testRunner.GivenAsync("Contosa Time Table Blazor is available", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="3799-List Courses Page")]
        [Xunit.TraitAttribute("FeatureTitle", "Contosa Time Table Blazor UI")]
        [Xunit.TraitAttribute("Description", "3799-List Courses Page")]
        public async System.Threading.Tasks.Task _3799_ListCoursesPage()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("3799-List Courses Page", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 9
  await testRunner.WhenAsync("user is navigated to courses page", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 10
  await testRunner.ThenAsync("The page should display a table of courses with the following columns: ID, Name, " +
                        "Description, Code, Start Date, End Date", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 11
  await testRunner.AndAsync("The table should be paginated, with 100 items per page", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 12
  await testRunner.AndAsync("The page should include pagination controls to navigate between pages", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="3800-Course Detail Page")]
        [Xunit.TraitAttribute("FeatureTitle", "Contosa Time Table Blazor UI")]
        [Xunit.TraitAttribute("Description", "3800-Course Detail Page")]
        public async System.Threading.Tasks.Task _3800_CourseDetailPage()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("3800-Course Detail Page", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 16
  await testRunner.WhenAsync("user is navigated to a course page", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 17
  await testRunner.ThenAsync("The page should display the following course details: ID, Name, Description, Code" +
                        ", Start Date, End Date", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 18
  await testRunner.AndAsync("The page should include a list of enrolled students with the following columns: I" +
                        "D, Name, Email, Address, Phone Number, Enrollment Date", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="3801-List Events Page")]
        [Xunit.TraitAttribute("FeatureTitle", "Contosa Time Table Blazor UI")]
        [Xunit.TraitAttribute("Description", "3801-List Events Page")]
        public async System.Threading.Tasks.Task _3801_ListEventsPage()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("3801-List Events Page", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 22
  await testRunner.WhenAsync("user is navigated to events page", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 23
  await testRunner.ThenAsync("The page should display a table of events with the following columns: ID, Name, D" +
                        "escription, Start Date, End Date, Location", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 24
  await testRunner.AndAsync("The table should be paginated, with 100 items per page", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 25
  await testRunner.AndAsync("The page should include pagination controls to navigate between pages", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 26
  await testRunner.AndAsync("Each event should have a link to view its details", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="3802-Event Detail Page")]
        [Xunit.TraitAttribute("FeatureTitle", "Contosa Time Table Blazor UI")]
        [Xunit.TraitAttribute("Description", "3802-Event Detail Page")]
        public async System.Threading.Tasks.Task _3802_EventDetailPage()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("3802-Event Detail Page", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 30
  await testRunner.WhenAsync("user is navigated to event details page", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 31
  await testRunner.ThenAsync("The page should display the following event details: ID, Name, Description, Start" +
                        " Date, End Date, Location", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 32
  await testRunner.AndAsync("The page should include the course details with the following properties: ID, Nam" +
                        "e, Description, Code, Start Date, End Date", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 33
  await testRunner.AndAsync("The page should include a button to update the event location", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 34
  await testRunner.AndAsync("The button should open a modal dialog to enter the new location", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="3803-List Students Page")]
        [Xunit.TraitAttribute("FeatureTitle", "Contosa Time Table Blazor UI")]
        [Xunit.TraitAttribute("Description", "3803-List Students Page")]
        public async System.Threading.Tasks.Task _3803_ListStudentsPage()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("3803-List Students Page", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 38
  await testRunner.WhenAsync("user is navigated to students page", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 39
  await testRunner.ThenAsync("The page should display a table of students with the following columns: ID, Name," +
                        " Email, Address, Phone Number, Enrollment Date", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 40
  await testRunner.AndAsync("Each student should have a link to view their details", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="3804-Student Detail Page")]
        [Xunit.TraitAttribute("FeatureTitle", "Contosa Time Table Blazor UI")]
        [Xunit.TraitAttribute("Description", "3804-Student Detail Page")]
        public async System.Threading.Tasks.Task _3804_StudentDetailPage()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("3804-Student Detail Page", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 43
   await testRunner.WhenAsync("user is navigated to student details page", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 44
  await testRunner.WhenAsync("The page should include a list of enrolled courses with the following columns Nam" +
                        "e, Description, Code, Start Date", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 45
  await testRunner.ThenAsync("The page should include a button to update the student name", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ContosaTimeTableBlazorUIFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ContosaTimeTableBlazorUIFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
